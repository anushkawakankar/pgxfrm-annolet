#+title:Webservices for page transformation
#+AUTHOR: Sadhana V
#+DATE: [2016-06-17 Fri]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export

* Requirements
+ Requirement is to build web-services for providing user friendly renarrations.


* List of APIs used
Following are the list of APIs used for the release.

|----------------------+----------------------+--------------------+-------------------+---------------------------|
| API usage            | URL                  | header             | payload           | result                    |
|                      |                      | required           | required          |                           |
|----------------------+----------------------+--------------------+-------------------+---------------------------|
| Phonetic Translation | /phonetic-trans      | 'Content-type':    | 'sentence':       | returns phonetic          |
| of sentence          |                      | 'application/json' | required sentence | translation of            |
| from list            |                      |                    |                   | words in the sentence     |
|                      |                      |                    |                   | from the list.            |
|----------------------+----------------------+--------------------+-------------------+---------------------------|
| Language translation | /language-translive  | 'Content-type':    | 'sentence':       | returns the language      |
| from web             |                      | 'application/json' | required sentence | translation of the        |
|                      |                      |                    |                   | sentence                  |
|----------------------+----------------------+--------------------+-------------------+---------------------------|                                                                                                                      


* Imports
** Imports for Python API
Following imports are used for running the webservices on flask

#+BEGIN_SRC python :tangle ../../code/webservices/service.py :eval no

from flask import Flask
from flask import request
import requests as req
import bs4
import pickle
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

#+END_SRC


* Api's

** Introduction
*** List of APIs
Following are the list of the APIs used
+ phonetic-trans
+ language-translive

*** phonetic API introduction
We use pickle library for fast loading of the dictionary whenever the
server starts for the first time.  The dictionary for the phonetic
translation is stored in file word.p from which the dictionary is
loaded in the beginning when server is started.

*** language translation API
+ For language translation, API of https://tech.yandex.com is used. 
+ The website provides a free key for making max of 350 requests per day.


** setting list and keys
+ Phonetic translation of all the 1000 basic words is stored in
  word_list.p which is loaded
+ The translation key for using language translation is loaded here.

#+BEGIN_SRC python :tangle ../../code/webservices/service.py :eval no

word_list = pickle.load( open( "word_list.p", "rb" ) )
translatekey = 'trnsl.1.1.20160620T044235Z.009e3fdaf079e045.51ec20ede6d14038c2cb193de1f8891c28dfc749'

#+END_SRC


** phonetic-trans API
Following is the code for getting the phonetic translation from the list

#+BEGIN_SRC python :tangle ../../code/webservices/service.py :eval no

@app.route("/phonetic-trans", methods=['POST'])
def phonetictrans():
    sentence = request.json['sentence']
    words = sentence.split()
    answer = []
    for word in words :
    	word = word.lower()
        if word in word_list:
            answer.append(word_list[word])
        else :
            answer.append(word)
	return " ".join(answer)

#+END_SRC


** language-trans
Following is the code for getting the language translation from the web

#+BEGIN_SRC python :tangle ../../code/webservices/service.py :eval no

@app.route("/language-translive", methods=['POST'])
def languagetranslive():
    try:
        sentence = request.json['sentence']
    except:
        return "sentence parameter not passed"
    try :
        fromlang = request.json['from-language']
    except:
        return "en"
    try :
        tolang = request.json['to-language']
    except:
        return "to language not passed"

    res = req.get('https://translate.yandex.net/api/v1.5/tr/translate?key='+translatekey+'&text='+sentence+'&lang='+fromlang+'-'+tolang+'&format=plain&options=0');
    soup = bs4.BeautifulSoup(res.text)
    ret = soup.text
    return ret;

#+END_SRC


** currency-conversion
Following is the code for getting the currency conversion from the web
#+BEGIN_SRC python :tangle ../../code/webservices/service.py :eval no

@app.route("/currency-conversion", methods=['POST'])
def currencyconversion():
    try :
        cur_amount = request.json['cur_amount']
    except:
        return "cur_amount parameter is not passed"
    try:
        from_cur = request.json['from_cur']
    except:
        return "from_cur parameter is not passed"
    try :
        to_cur = request.json['to_cur']
    except:
        return "to_cur parameter is not passed"

    if (from_cur == "USD" and to_cur == "INR"):
        res = cur_amount*64.78
    elif (from_cur == "USD" and to_cur == "EUR"):
        res = cur_amount*0.88
    elif (from_cur == "INR" and to_cur == "USD"):
        res = cur_amount*0.015
    elif (from_cur == "INR" and to_cur == "EUR"):
        res = cur_amount*0.014
    elif (from_cur == "EUR" and to_cur == "USD"):
        res = cur_amount*1.13
    elif (from_cur == "EUR" and to_cur == "INR"):
        res = cur_amount*73.34
    else:
        res = cur_amount
    return str(res)+" "+to_cur

#+END_SRC


** measurement-conversion
Following is the code for getting the measurement-conversion.
#+BEGIN_SRC python :tangle ../../code/webservices/service.py :eval no

@app.route("/measurement-conversion", methods=['POST'])
def measurementconversion():
    print "inside fsdfds"
    try :
        measurement_num = request.json['measurement_num']
        print measurement_num
    except:
        return "to_measure parameter is not passed"
    try:
        from_measure = request.json['from_measure']
        print from_measure
    except:
        return "from_measure parameter is not passed"
    try :
        to_measure = request.json['to_measure']
        print to_measure
    except:
        return "to_measure parameter is not passed"

    if (from_measure == "km" and to_measure == "mi"):
        res = measurement_num*0.62137
    elif (from_measure == "km" and to_measure == "ft"):
        res = measurement_num*3280.8
    elif (from_measure == "mi" and to_measure == "km"):
        res = measurement_num/0.62137
    elif (from_measure == "mi" and to_measure == "ft"):
        res = measurement_num * 5280.0
    elif (from_measure == "ft" and to_measure == "km"):
        res = measurement_num * 0.0003048
    elif (from_measure == "ft" and to_measure == "mi"):
        res = measurement_num * 0.00018939
    else:
        res = measurement_num
    return str(res)+" "+to_measure

#+END_SRC



** test api

#+BEGIN_SRC python :tangle ../../code/webservices/service.py :eval no

@app.route("/test", methods=['GET'])
def test():
    return "some test string"

#+END_SRC


* run
Running the app
** running the app
#+BEGIN_SRC python :tangle ../../code/webservices/service.py :eval no

if __name__ == '__main__':
   app.run()

#+END_SRC


* Dependencies
The depedencies of the webservices and virtual enviornment setup can
be done by the following bash commands.

#+BEGIN_SRC bash :tangle ../../code/webservices/setup.sh :eval no

#! bash script for setting up enviornment for webservices

sudo apt-get install python-virtualenv

virtualenv flask

flask/bin/pip install flask

flask/bin/pip install requests

flask/bin/pip install bs4

flask/bin/pip install -U flask-cors

#+END_SRC
